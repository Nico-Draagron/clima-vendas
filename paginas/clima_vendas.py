# ============================================================================
# üå§Ô∏è pages/clima_vendas.py - AN√ÅLISE CLIMA x VENDAS
# ============================================================================

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats
from scipy.stats import pearsonr, spearmanr
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import warnings
warnings.filterwarnings('ignore')

class ClimaVendasPage:
    """P√°gina completa de an√°lise clima x vendas"""
    
    def __init__(self, store_manager):
        self.store_manager = store_manager
    
    def render(self):
        """Renderiza p√°gina principal"""
        
        st.markdown("# üå§Ô∏è An√°lise Clima x Vendas")
        st.markdown("**Descubra como o clima impacta suas vendas e tome decis√µes baseadas em dados**")
        
        # Carregar dados
        stores = self.store_manager.get_available_stores()
        
        if not stores:
            st.error("‚ùå Nenhuma loja configurada. Configure uma loja no painel administrativo.")
            return
        
        # Sele√ß√£o de loja
        store_options = {f"{info['display_name']} ({store_id})": store_id 
                        for store_id, info in stores.items()}
        
        selected_display = st.selectbox(
            "üè™ Escolha uma loja para an√°lise:",
            options=list(store_options.keys())
        )
        
        selected_store_id = store_options[selected_display]
        
        # Carregar dados da loja
        df = self.store_manager.load_store_data(selected_store_id)
        
        if df is None or df.empty:
            st.error("‚ùå N√£o foi poss√≠vel carregar dados da loja")
            return
        
        store_info = stores[selected_store_id]
        value_col = store_info['value_column']
        
        if value_col not in df.columns:
            st.error(f"‚ùå Coluna de vendas '{value_col}' n√£o encontrada nos dados")
            return
        
        # Preparar dados
        df = self._prepare_data(df, value_col)
        
        if df is None:
            return
        
        # Tabs principais
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìä Vis√£o Geral",
            "üîç Correla√ß√µes", 
            "üìà An√°lise Detalhada",
            "üå°Ô∏è Impacto da Temperatura",
            "üåßÔ∏è Impacto da Precipita√ß√£o"
        ])
        
        with tab1:
            self._render_overview(df, value_col, store_info['display_name'])
        
        with tab2:
            self._render_correlations(df, value_col)
        
        with tab3:
            self._render_detailed_analysis(df, value_col)
        
        with tab4:
            self._render_temperature_analysis(df, value_col)
        
        with tab5:
            self._render_precipitation_analysis(df, value_col)
    
    def _prepare_data(self, df, value_col):
        """Prepara e valida os dados"""
        
        # Verificar colunas essenciais
        required_cols = ['data', value_col]
        climate_cols = ['temp_media', 'temp_max', 'temp_min', 'precipitacao_total']
        
        missing_cols = [col for col in required_cols if col not in df.columns]
        if missing_cols:
            st.error(f"‚ùå Colunas obrigat√≥rias faltando: {missing_cols}")
            return None
        
        # Converter data
        df['data'] = pd.to_datetime(df['data'])
        
        # Verificar dados clim√°ticos dispon√≠veis
        available_climate = [col for col in climate_cols if col in df.columns]
        
        if not available_climate:
            st.error("‚ùå Nenhuma vari√°vel clim√°tica encontrada nos dados")
            return None
        
        # Filtros de data
        col1, col2 = st.columns(2)
        
        with col1:
            start_date = st.date_input(
                "üìÖ Data Inicial",
                value=df['data'].min().date(),
                min_value=df['data'].min().date(),
                max_value=df['data'].max().date()
            )
        
        with col2:
            end_date = st.date_input(
                "üìÖ Data Final", 
                value=df['data'].max().date(),
                min_value=df['data'].min().date(),
                max_value=df['data'].max().date()
            )
        
        # Aplicar filtros
        df_filtered = df[
            (df['data'] >= pd.to_datetime(start_date)) & 
            (df['data'] <= pd.to_datetime(end_date))
        ].copy()
        
        if df_filtered.empty:
            st.warning("‚ö†Ô∏è Nenhum dado encontrado para o per√≠odo selecionado")
            return None
        
        # Adicionar features temporais
        df_filtered = self._add_temporal_features(df_filtered)
        
        return df_filtered
    
    def _add_temporal_features(self, df):
        """Adiciona features temporais aos dados"""
        
        df['ano'] = df['data'].dt.year
        df['mes'] = df['data'].dt.month
        df['dia_semana'] = df['data'].dt.dayofweek
        df['dia_mes'] = df['data'].dt.day
        df['dia_ano'] = df['data'].dt.dayofyear
        df['semana_ano'] = df['data'].dt.isocalendar().week
        
        # Categorias temporais
        df['trimestre'] = df['data'].dt.quarter
        df['eh_weekend'] = df['dia_semana'].isin([5, 6])
        df['estacao'] = df['mes'].map({
            12: 'Ver√£o', 1: 'Ver√£o', 2: 'Ver√£o',
            3: 'Outono', 4: 'Outono', 5: 'Outono', 
            6: 'Inverno', 7: 'Inverno', 8: 'Inverno',
            9: 'Primavera', 10: 'Primavera', 11: 'Primavera'
        })
        
        return df
    
    def _render_overview(self, df, value_col, store_name):
        """Vis√£o geral com m√©tricas principais"""
        
        st.subheader(f"üìä Vis√£o Geral - {store_name}")
        
        # M√©tricas principais
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_vendas = df[value_col].sum()
            st.metric("üí∞ Vendas Totais", f"R$ {total_vendas:,.2f}".replace(',', '.'))
        
        with col2:
            media_vendas = df[value_col].mean()
            st.metric("üìä M√©dia Di√°ria", f"R$ {media_vendas:,.2f}".replace(',', '.'))
        
        with col3:
            if 'precipitacao_total' in df.columns:
                dias_chuva = (df['precipitacao_total'] > 0).sum()
                pct_chuva = (dias_chuva / len(df)) * 100
                st.metric("üåßÔ∏è Dias com Chuva", f"{dias_chuva} ({pct_chuva:.1f}%)")
            else:
                st.metric("üåßÔ∏è Dados de Chuva", "N/A")
        
        with col4:
            if 'temp_media' in df.columns:
                temp_media = df['temp_media'].mean()
                st.metric("üå°Ô∏è Temp. M√©dia", f"{temp_media:.1f}¬∞C")
            else:
                st.metric("üå°Ô∏è Temperatura", "N/A")
        
        # Gr√°fico de vendas no tempo com overlay clim√°tico
        st.subheader("üìà Evolu√ß√£o das Vendas vs Clima")
        
        if 'temp_media' in df.columns:
            fig = make_subplots(
                rows=2, cols=1,
                subplot_titles=['Vendas Di√°rias', 'Temperatura e Precipita√ß√£o'],
                specs=[[{"secondary_y": False}], [{"secondary_y": True}]],
                vertical_spacing=0.1
            )
            
            # Vendas
            fig.add_trace(
                go.Scatter(
                    x=df['data'], 
                    y=df[value_col],
                    name='Vendas',
                    line=dict(color='#1f77b4', width=2),
                    hovertemplate='<b>%{x}</b><br>Vendas: R$ %{y:,.2f}<extra></extra>'
                ),
                row=1, col=1
            )
            
            # Temperatura
            fig.add_trace(
                go.Scatter(
                    x=df['data'], 
                    y=df['temp_media'],
                    name='Temperatura',
                    line=dict(color='#ff7f0e', width=1),
                    hovertemplate='<b>%{x}</b><br>Temp: %{y:.1f}¬∞C<extra></extra>'
                ),
                row=2, col=1
            )
            
            # Precipita√ß√£o (se dispon√≠vel)
            if 'precipitacao_total' in df.columns:
                fig.add_trace(
                    go.Bar(
                        x=df['data'], 
                        y=df['precipitacao_total'],
                        name='Precipita√ß√£o',
                        marker_color='#2ca02c',
                        opacity=0.6,
                        hovertemplate='<b>%{x}</b><br>Chuva: %{y:.1f}mm<extra></extra>'
                    ),
                    row=2, col=1, secondary_y=True
                )
            
            fig.update_layout(
                height=600,
                showlegend=True,
                title_text="An√°lise Temporal: Vendas e Vari√°veis Clim√°ticas"
            )
            
            fig.update_xaxes(title_text="Data", row=2, col=1)
            fig.update_yaxes(title_text="Vendas (R$)", row=1, col=1)
            fig.update_yaxes(title_text="Temperatura (¬∞C)", row=2, col=1)
            
            if 'precipitacao_total' in df.columns:
                fig.update_yaxes(title_text="Precipita√ß√£o (mm)", row=2, col=1, secondary_y=True)
            
            st.plotly_chart(fig, use_container_width=True)
        
        # Insights r√°pidos
        self._render_quick_insights(df, value_col)
    
    def _render_quick_insights(self, df, value_col):
        """Insights r√°pidos automatizados"""
        
        st.subheader("üí° Insights Autom√°ticos")
        
        insights = []
        
        # Insight 1: Melhor dia da semana
        vendas_dia_semana = df.groupby('dia_semana')[value_col].mean()
        melhor_dia = vendas_dia_semana.idxmax()
        dias_semana = ['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado', 'Domingo']
        
        insights.append({
            'icon': 'üìÖ',
            'title': 'Melhor Dia da Semana',
            'text': f'{dias_semana[melhor_dia]} tem as maiores vendas m√©dias (R$ {vendas_dia_semana[melhor_dia]:,.2f})'
        })
        
        # Insight 2: Impacto da temperatura
        if 'temp_media' in df.columns:
            corr_temp = df[value_col].corr(df['temp_media'])
            if abs(corr_temp) > 0.3:
                relacao = "positiva" if corr_temp > 0 else "negativa"
                insights.append({
                    'icon': 'üå°Ô∏è',
                    'title': 'Impacto da Temperatura',
                    'text': f'Correla√ß√£o {relacao} forte entre temperatura e vendas (r={corr_temp:.3f})'
                })
        
        # Insight 3: Impacto da chuva
        if 'precipitacao_total' in df.columns:
            vendas_com_chuva = df[df['precipitacao_total'] > 0][value_col].mean()
            vendas_sem_chuva = df[df['precipitacao_total'] == 0][value_col].mean()
            
            if vendas_sem_chuva > 0:
                impacto_pct = ((vendas_com_chuva - vendas_sem_chuva) / vendas_sem_chuva) * 100
                
                if abs(impacto_pct) > 5:
                    sinal = "aumentam" if impacto_pct > 0 else "diminuem"
                    insights.append({
                        'icon': 'üåßÔ∏è',
                        'title': 'Impacto da Chuva',
                        'text': f'Vendas {sinal} {abs(impacto_pct):.1f}% em dias chuvosos'
                    })
        
        # Insight 4: Sazonalidade
        vendas_estacao = df.groupby('estacao')[value_col].mean()
        melhor_estacao = vendas_estacao.idxmax()
        pior_estacao = vendas_estacao.idxmin()
        
        insights.append({
            'icon': 'üçÇ',
            'title': 'Sazonalidade',
            'text': f'Melhor √©poca: {melhor_estacao} (R$ {vendas_estacao[melhor_estacao]:,.2f}). Pior: {pior_estacao} (R$ {vendas_estacao[pior_estacao]:,.2f})'
        })
        
        # Exibir insights
        for insight in insights:
            st.info(f"{insight['icon']} **{insight['title']}**: {insight['text']}")
    
    def _render_correlations(self, df, value_col):
        """An√°lise de correla√ß√µes"""
        
        st.subheader("üîç Matrix de Correla√ß√µes")
        
        # Selecionar colunas num√©ricas relevantes
        numeric_cols = [value_col]
        climate_cols = ['temp_media', 'temp_max', 'temp_min', 'precipitacao_total', 'umid_mediana', 'rad_mediana']
        temporal_cols = ['mes', 'dia_semana', 'dia_ano']
        
        available_cols = [col for col in climate_cols + temporal_cols if col in df.columns]
        correlation_cols = numeric_cols + available_cols
        
        if len(correlation_cols) < 2:
            st.warning("‚ö†Ô∏è Dados insuficientes para an√°lise de correla√ß√£o")
            return
        
        # Calcular correla√ß√µes
        corr_matrix = df[correlation_cols].corr()
        
        # Heatmap de correla√ß√µes
        fig_heatmap = px.imshow(
            corr_matrix,
            labels=dict(x="Vari√°veis", y="Vari√°veis", color="Correla√ß√£o"),
            x=corr_matrix.columns,
            y=corr_matrix.columns,
            color_continuous_scale='RdBu_r',
            aspect="auto",
            title="Matrix de Correla√ß√£o: Vendas vs Vari√°veis Clim√°ticas"
        )
        
        fig_heatmap.update_layout(height=500)
        st.plotly_chart(fig_heatmap, use_container_width=True)
        
        # Correla√ß√µes mais importantes
        st.subheader("üéØ Correla√ß√µes Mais Relevantes")
        
        vendas_corr = corr_matrix[value_col].drop(value_col).abs().sort_values(ascending=False)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**üî• Correla√ß√µes Mais Fortes:**")
            for var, corr_val in vendas_corr.head(5).items():
                original_corr = corr_matrix[value_col][var]
                sinal = "üìà" if original_corr > 0 else "üìâ"
                st.write(f"{sinal} **{var}**: {original_corr:.3f}")
        
        with col2:
            st.write("**üßä Correla√ß√µes Mais Fracas:**")
            for var, corr_val in vendas_corr.tail(5).items():
                original_corr = corr_matrix[value_col][var]
                st.write(f"‚Ä¢ **{var}**: {original_corr:.3f}")
        
        # Testes estat√≠sticos
        if len(available_cols) > 0:
            st.subheader("üìä Testes de Signific√¢ncia")
            
            for col in available_cols[:3]:  # Limitar a 3 para n√£o sobrecarregar
                if col in df.columns:
                    corr_pearson, p_value = pearsonr(df[value_col], df[col])
                    
                    significancia = "‚úÖ Significativa" if p_value < 0.05 else "‚ùå N√£o significativa"
                    
                    st.write(f"**{col} vs Vendas:**")
                    st.write(f"‚Ä¢ Correla√ß√£o: {corr_pearson:.3f}")
                    st.write(f"‚Ä¢ P-valor: {p_value:.4f}")
                    st.write(f"‚Ä¢ Signific√¢ncia: {significancia}")
                    st.markdown("---")
    
    def _render_detailed_analysis(self, df, value_col):
        """An√°lise detalhada com segmenta√ß√µes"""
        
        st.subheader("üìà An√°lise Detalhada por Segmentos")
        
        # An√°lise por esta√ß√£o do ano
        if 'estacao' in df.columns:
            st.subheader("üçÇ Vendas por Esta√ß√£o")
            
            vendas_estacao = df.groupby('estacao')[value_col].agg(['mean', 'std', 'count']).round(2)
            vendas_estacao.columns = ['M√©dia', 'Desvio Padr√£o', 'Dias']
            
            st.dataframe(vendas_estacao, use_container_width=True)
            
            # Boxplot por esta√ß√£o
            fig_box = px.box(
                df, 
                x='estacao', 
                y=value_col,
                title="Distribui√ß√£o de Vendas por Esta√ß√£o",
                labels={'estacao': 'Esta√ß√£o', value_col: 'Vendas (R$)'}
            )
            st.plotly_chart(fig_box, use_container_width=True)
        
        # An√°lise por dia da semana
        st.subheader("üìÖ Vendas por Dia da Semana")
        
        dias_semana = ['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado', 'Domingo']
        df_dia_semana = df.copy()
        df_dia_semana['nome_dia'] = df_dia_semana['dia_semana'].map(dict(enumerate(dias_semana)))
        
        vendas_dia = df_dia_semana.groupby('nome_dia')[value_col].agg(['mean', 'std']).round(2)
        vendas_dia = vendas_dia.reindex(dias_semana)
        
        fig_dia = px.bar(
            x=vendas_dia.index,
            y=vendas_dia['mean'],
            error_y=vendas_dia['std'],
            title="Vendas M√©dias por Dia da Semana",
            labels={'x': 'Dia da Semana', 'y': 'Vendas M√©dias (R$)'}
        )
        st.plotly_chart(fig_dia, use_container_width=True)
        
        # Clustering de padr√µes clim√°ticos
        if all(col in df.columns for col in ['temp_media', 'precipitacao_total']):
            st.subheader("üéØ Clusters Clim√°ticos")
            
            # Preparar dados para clustering
            features_cluster = df[['temp_media', 'precipitacao_total']].fillna(df[['temp_media', 'precipitacao_total']].mean())
            
            scaler = StandardScaler()
            features_scaled = scaler.fit_transform(features_cluster)
            
            # K-means clustering
            kmeans = KMeans(n_clusters=3, random_state=42)
            clusters = kmeans.fit_predict(features_scaled)
            
            df_cluster = df.copy()
            df_cluster['cluster'] = clusters
            df_cluster['cluster_nome'] = df_cluster['cluster'].map({
                0: 'Clima Moderado',
                1: 'Clima Quente/Seco', 
                2: 'Clima Frio/√ömido'
            })
            
            # Vendas por cluster
            vendas_cluster = df_cluster.groupby('cluster_nome')[value_col].agg(['mean', 'count']).round(2)
            vendas_cluster.columns = ['Vendas M√©dias', 'N√∫mero de Dias']
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**Vendas por Padr√£o Clim√°tico:**")
                st.dataframe(vendas_cluster, use_container_width=True)
            
            with col2:
                # Scatter plot dos clusters
                fig_cluster = px.scatter(
                    df_cluster,
                    x='temp_media',
                    y='precipitacao_total',
                    color='cluster_nome',
                    size=value_col,
                    title="Padr√µes Clim√°ticos e Vendas",
                    labels={
                        'temp_media': 'Temperatura M√©dia (¬∞C)',
                        'precipitacao_total': 'Precipita√ß√£o (mm)',
                        value_col: 'Vendas (R$)'
                    }
                )
                st.plotly_chart(fig_cluster, use_container_width=True)
    
    def _render_temperature_analysis(self, df, value_col):
        """An√°lise espec√≠fica do impacto da temperatura"""
        
        st.subheader("üå°Ô∏è Impacto Detalhado da Temperatura")
        
        if 'temp_media' not in df.columns:
            st.warning("‚ö†Ô∏è Dados de temperatura n√£o dispon√≠veis")
            return
        
        # Categoriza√ß√£o por faixas de temperatura
        df_temp = df.copy()
        df_temp['faixa_temp'] = pd.cut(
            df_temp['temp_media'],
            bins=[0, 18, 22, 26, 30, 50],
            labels=['Muito Frio (<18¬∞C)', 'Frio (18-22¬∞C)', 'Ameno (22-26¬∞C)', 'Quente (26-30¬∞C)', 'Muito Quente (>30¬∞C)']
        )
        
        # Estat√≠sticas por faixa
        temp_stats = df_temp.groupby('faixa_temp')[value_col].agg(['mean', 'std', 'count']).round(2)
        temp_stats.columns = ['Vendas M√©dias', 'Desvio Padr√£o', 'N√∫mero de Dias']
        
        st.write("**üìä Vendas por Faixa de Temperatura:**")
        st.dataframe(temp_stats, use_container_width=True)
        
        # Gr√°ficos detalhados
        col1, col2 = st.columns(2)
        
        with col1:
            # Scatter plot temperatura vs vendas
            fig_scatter = px.scatter(
                df_temp,
                x='temp_media',
                y=value_col,
                trendline="ols",
                title="Rela√ß√£o Temperatura vs Vendas",
                labels={'temp_media': 'Temperatura M√©dia (¬∞C)', value_col: 'Vendas (R$)'}
            )
            
            # Adicionar linha de tend√™ncia manual se necess√°rio
            z = np.polyfit(df_temp['temp_media'], df_temp[value_col], 1)
            trendline_text = f"Tend√™ncia: y = {z[0]:.2f}x + {z[1]:.2f}"
            
            fig_scatter.add_annotation(
                x=df_temp['temp_media'].max() * 0.7,
                y=df_temp[value_col].max() * 0.9,
                text=trendline_text,
                showarrow=False,
                bgcolor="rgba(255,255,255,0.8)"
            )
            
            st.plotly_chart(fig_scatter, use_container_width=True)
        
        with col2:
            # Violin plot por faixa de temperatura
            fig_violin = px.violin(
                df_temp.dropna(subset=['faixa_temp']),
                x='faixa_temp',
                y=value_col,
                title="Distribui√ß√£o de Vendas por Faixa de Temperatura",
                labels={'faixa_temp': 'Faixa de Temperatura', value_col: 'Vendas (R$)'}
            )
            fig_violin.update_xaxes(tickangle=45)
            st.plotly_chart(fig_violin, use_container_width=True)
        
        # An√°lise de temperatura √≥tima
        st.subheader("üéØ Temperatura √ìtima para Vendas")
        
        # Encontrar faixa √≥tima
        melhor_faixa = temp_stats['Vendas M√©dias'].idxmax()
        vendas_otima = temp_stats.loc[melhor_faixa, 'Vendas M√©dias']
        
        # Correla√ß√£o temperatura vs vendas
        corr_temp = df['temp_media'].corr(df[value_col])
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("üå°Ô∏è Faixa √ìtima", melhor_faixa)
        
        with col2:
            st.metric("üí∞ Vendas M√©dias", f"R$ {vendas_otima:,.2f}".replace(',', '.'))
        
        with col3:
            st.metric("üìä Correla√ß√£o", f"{corr_temp:.3f}")
        
        # Recomenda√ß√µes baseadas na temperatura
        self._render_temperature_recommendations(df_temp, value_col, corr_temp)
    
    def _render_temperature_recommendations(self, df, value_col, correlation):
        """Recomenda√ß√µes baseadas na an√°lise de temperatura"""
        
        st.subheader("üí° Recomenda√ß√µes - Temperatura")
        
        recommendations = []
        
        if abs(correlation) > 0.3:
            if correlation > 0:
                recommendations.append({
                    'type': 'success',
                    'text': f"üìà **Correla√ß√£o Positiva Forte** (r={correlation:.3f}): Vendas aumentam com temperaturas mais altas. Considere campanhas promocionais em dias quentes."
                })
            else:
                recommendations.append({
                    'type': 'info', 
                    'text': f"üìâ **Correla√ß√£o Negativa Forte** (r={correlation:.3f}): Vendas diminuem com temperaturas mais altas. Planeje estrat√©gias para dias quentes."
                })
        
        # An√°lise de variabilidade
        temp_variance = df['temp_media'].var()
        if temp_variance > 25:  # Alta variabilidade de temperatura
            recommendations.append({
                'type': 'warning',
                'text': "üå°Ô∏è **Alta Variabilidade T√©rmica**: Grande varia√ß√£o de temperatura detectada. Mantenha estrat√©gias flex√≠veis para diferentes condi√ß√µes clim√°ticas."
            })
        
        # An√°lise sazonal
        if 'estacao' in df.columns:
            vendas_verao = df[df['estacao'] == 'Ver√£o'][value_col].mean()
            vendas_inverno = df[df['estacao'] == 'Inverno'][value_col].mean()
            
            if vendas_verao > vendas_inverno * 1.1:
                recommendations.append({
                    'type': 'success',
                    'text': f"‚òÄÔ∏è **Padr√£o Sazonal**: Vendas 10%+ maiores no ver√£o (R$ {vendas_verao:,.2f} vs R$ {vendas_inverno:,.2f}). Intensifique campanhas de ver√£o."
                })
        
        # Exibir recomenda√ß√µes
        for rec in recommendations:
            if rec['type'] == 'success':
                st.success(rec['text'])
            elif rec['type'] == 'warning':
                st.warning(rec['text'])
            else:
                st.info(rec['text'])
    
    def _render_precipitation_analysis(self, df, value_col):
        """An√°lise espec√≠fica do impacto da precipita√ß√£o"""
        
        st.subheader("üåßÔ∏è Impacto Detalhado da Precipita√ß√£o")
        
        if 'precipitacao_total' not in df.columns:
            st.warning("‚ö†Ô∏è Dados de precipita√ß√£o n√£o dispon√≠veis")
            return
        
        # Categoriza√ß√£o por intensidade de chuva
        df_rain = df.copy()
        df_rain['categoria_chuva'] = pd.cut(
            df_rain['precipitacao_total'],
            bins=[-0.1, 0, 2, 10, 25, float('inf')],
            labels=['Sem Chuva', 'Garoa (0-2mm)', 'Chuva Leve (2-10mm)', 'Chuva Moderada (10-25mm)', 'Chuva Intensa (>25mm)']
        )
        
        # Estat√≠sticas por categoria
        rain_stats = df_rain.groupby('categoria_chuva')[value_col].agg(['mean', 'std', 'count']).round(2)
        rain_stats.columns = ['Vendas M√©dias', 'Desvio Padr√£o', 'N√∫mero de Dias']
        
        st.write("**üìä Vendas por Intensidade de Precipita√ß√£o:**")
        st.dataframe(rain_stats, use_container_width=True)
        
        # Compara√ß√£o com/sem chuva
        col1, col2, col3 = st.columns(3)
        
        vendas_sem_chuva = df_rain[df_rain['precipitacao_total'] == 0][value_col].mean()
        vendas_com_chuva = df_rain[df_rain['precipitacao_total'] > 0][value_col].mean()
        
        if vendas_sem_chuva > 0:
            impacto_percentual = ((vendas_com_chuva - vendas_sem_chuva) / vendas_sem_chuva) * 100
        else:
            impacto_percentual = 0
        
        with col1:
            st.metric("‚òÄÔ∏è Vendas - Sem Chuva", f"R$ {vendas_sem_chuva:,.2f}".replace(',', '.'))
        
        with col2:
            st.metric("üåßÔ∏è Vendas - Com Chuva", f"R$ {vendas_com_chuva:,.2f}".replace(',', '.'))
        
        with col3:
            delta_color = "normal" if abs(impacto_percentual) < 5 else ("inverse" if impacto_percentual < 0 else "normal")
            st.metric("üìä Impacto da Chuva", f"{impacto_percentual:+.1f}%", delta_color=delta_color)
        
        # Gr√°ficos detalhados
        col1, col2 = st.columns(2)
        
        with col1:
            # Boxplot por categoria de chuva
            fig_rain_box = px.box(
                df_rain.dropna(subset=['categoria_chuva']),
                x='categoria_chuva',
                y=value_col,
                title="Distribui√ß√£o de Vendas por Intensidade de Chuva",
                labels={'categoria_chuva': 'Categoria de Chuva', value_col: 'Vendas (R$)'}
            )
            fig_rain_box.update_xaxes(tickangle=45)
            st.plotly_chart(fig_rain_box, use_container_width=True)
        
        with col2:
            # Scatter plot precipita√ß√£o vs vendas (com escala logar√≠tmica para precipita√ß√£o)
            df_rain_scatter = df_rain[df_rain['precipitacao_total'] > 0]
            
            if not df_rain_scatter.empty:
                fig_rain_scatter = px.scatter(
                    df_rain_scatter,
                    x='precipitacao_total',
                    y=value_col,
                    title="Rela√ß√£o Precipita√ß√£o vs Vendas",
                    labels={'precipitacao_total': 'Precipita√ß√£o (mm)', value_col: 'Vendas (R$)'},
                    log_x=True
                )
                st.plotly_chart(fig_rain_scatter, use_container_width=True)
        
        # An√°lise mensal da chuva
        if 'mes' in df.columns:
            st.subheader("üìÖ Padr√£o Mensal de Chuva e Vendas")
            
            monthly_rain = df_rain.groupby('mes').agg({
                'precipitacao_total': 'mean',
                value_col: 'mean'
            }).round(2)
            
            fig_monthly = make_subplots(specs=[[{"secondary_y": True}]])
            
            fig_monthly.add_trace(
                go.Bar(
                    x=list(range(1, 13)),
                    y=monthly_rain['precipitacao_total'],
                    name='Precipita√ß√£o M√©dia (mm)',
                    opacity=0.7
                ),
                secondary_y=False,
            )
            
            fig_monthly.add_trace(
                go.Scatter(
                    x=list(range(1, 13)),
                    y=monthly_rain[value_col],
                    mode='lines+markers',
                    name='Vendas M√©dias (R$)',
                    line=dict(color='red', width=3)
                ),
                secondary_y=True,
            )
            
            fig_monthly.update_xaxes(title_text="M√™s")
            fig_monthly.update_yaxes(title_text="Precipita√ß√£o M√©dia (mm)", secondary_y=False)
            fig_monthly.update_yaxes(title_text="Vendas M√©dias (R$)", secondary_y=True)
            fig_monthly.update_layout(title_text="Padr√£o Mensal: Chuva vs Vendas")
            
            st.plotly_chart(fig_monthly, use_container_width=True)
        
        # Recomenda√ß√µes para precipita√ß√£o
        self._render_precipitation_recommendations(df_rain, value_col, impacto_percentual)
    
    def _render_precipitation_recommendations(self, df, value_col, impact_percentage):
        """Recomenda√ß√µes baseadas na an√°lise de precipita√ß√£o"""
        
        st.subheader("üí° Recomenda√ß√µes - Precipita√ß√£o")
        
        recommendations = []
        
        # Impacto significativo da chuva
        if abs(impact_percentage) > 10:
            if impact_percentage < 0:
                recommendations.append({
                    'type': 'warning',
                    'text': f"üìâ **Alto Impacto Negativo** ({impact_percentage:.1f}%): Chuva reduz significativamente as vendas. Desenvolva estrat√©gias para dias chuvosos (delivery, produtos indoor, etc.)."
                })
            else:
                recommendations.append({
                    'type': 'success',
                    'text': f"üìà **Impacto Positivo** ({impact_percentage:.1f}%): Chuva aumenta as vendas! Aproveite dias chuvosos para campanhas especiais."
                })
        
        # An√°lise de dias consecutivos de chuva
        consecutive_rain_days = 0
        max_consecutive = 0
        
        for _, row in df.iterrows():
            if row['precipitacao_total'] > 0:
                consecutive_rain_days += 1
                max_consecutive = max(max_consecutive, consecutive_rain_days)
            else:
                consecutive_rain_days = 0
        
        if max_consecutive > 3:
            recommendations.append({
                'type': 'info',
                'text': f"üåßÔ∏è **Per√≠odos Chuvosos Longos**: At√© {max_consecutive} dias consecutivos de chuva detectados. Planeje estrat√©gias para per√≠odos prolongados de mau tempo."
            })
        
        # An√°lise sazonal de chuva
        if 'estacao' in df.columns:
            rain_by_season = df.groupby('estacao')['precipitacao_total'].mean()
            rainiest_season = rain_by_season.idxmax()
            driest_season = rain_by_season.idxmin()
            
            recommendations.append({
                'type': 'info',
                'text': f"üå¶Ô∏è **Padr√£o Sazonal**: {rainiest_season} √© a esta√ß√£o mais chuvosa, {driest_season} a mais seca. Ajuste estrat√©gias sazonalmente."
            })
        
        # Exibir recomenda√ß√µes
        for rec in recommendations:
            if rec['type'] == 'success':
                st.success(rec['text'])
            elif rec['type'] == 'warning':
                st.warning(rec['text'])
            else:
                st.info(rec['text'])

# Fun√ß√£o para integrar com streamlit_app.py
def show_clima_vendas_page(df, role, store_manager):
    """Fun√ß√£o para mostrar a p√°gina clima x vendas"""
    
    page = ClimaVendasPage(store_manager)
    page.render()